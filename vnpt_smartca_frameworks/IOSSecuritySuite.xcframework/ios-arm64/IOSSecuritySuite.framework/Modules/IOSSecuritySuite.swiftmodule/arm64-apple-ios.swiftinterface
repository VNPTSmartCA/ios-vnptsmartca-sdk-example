// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name IOSSecuritySuite
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CommonCrypto
import Darwin
import Foundation
@_exported import IOSSecuritySuite
import MachO
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public enum FileIntegrityCheck {
  case bundleID(Swift.String)
  case mobileProvision(Swift.String)
  case machO(Swift.String, Swift.String)
}
extension IOSSecuritySuite.FileIntegrityCheck {
  public var description: Swift.String {
    get
  }
}
public typealias FileIntegrityCheckResult = (result: Swift.Bool, hitChecks: [IOSSecuritySuite.FileIntegrityCheck])
public enum IntegrityCheckerImageTarget {
  case `default`
  case custom(Swift.String)
}
@_hasMissingDesignatedInitializers @available(iOSApplicationExtension, unavailable)
public class IOSSecuritySuite {
  public static func amIJailbroken() -> Swift.Bool
  public static func amIJailbrokenWithFailMessage() -> (jailbroken: Swift.Bool, failMessage: Swift.String)
  public static func amIJailbrokenWithFailedChecks() -> (jailbroken: Swift.Bool, failedChecks: [IOSSecuritySuite.FailedCheck])
  public static func amIRunInEmulator() -> Swift.Bool
  public static func amIDebugged() -> Swift.Bool
  public static func denyDebugger()
  public static func amITampered(_ checks: [IOSSecuritySuite.FileIntegrityCheck]) -> IOSSecuritySuite.FileIntegrityCheckResult
  public static func amIReverseEngineered() -> Swift.Bool
  public static func amIRuntimeHooked(dyldWhiteList: [Swift.String], detectionClass: Swift.AnyClass, selector: ObjectiveC.Selector, isClassMethod: Swift.Bool) -> Swift.Bool
  public static func amIProxied() -> Swift.Bool
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
extension IOSSecuritySuite.IOSSecuritySuite {
  public static func amIMSHooked(_ functionAddress: Swift.UnsafeMutableRawPointer) -> Swift.Bool
  public static func denyMSHook(_ functionAddress: Swift.UnsafeMutableRawPointer) -> Swift.UnsafeMutableRawPointer?
  public static func denySymbolHook(_ symbol: Swift.String)
  public static func denySymbolHook(_ symbol: Swift.String, at image: Swift.UnsafePointer<MachO.mach_header>, imageSlide slide: Swift.Int)
  public static func getMachOFileHashValue(_ target: IOSSecuritySuite.IntegrityCheckerImageTarget = .default) -> Swift.String?
  public static func findLoadedDylibs(_ target: IOSSecuritySuite.IntegrityCheckerImageTarget = .default) -> [Swift.String]?
  public static func hasBreakpointAt(_ functionAddr: Swift.UnsafeRawPointer, functionSize: Darwin.vm_size_t?) -> Swift.Bool
  public static func hasWatchpoint() -> Swift.Bool
}
public typealias FailedCheck = (check: IOSSecuritySuite.JailbreakCheck, failMessage: Swift.String)
public enum JailbreakCheck : Swift.CaseIterable {
  case urlSchemes
  case existenceOfSuspiciousFiles
  case suspiciousFilesCanBeOpened
  case restrictedDirectoriesWriteable
  case fork
  case symbolicLinks
  case dyld
  public static func == (a: IOSSecuritySuite.JailbreakCheck, b: IOSSecuritySuite.JailbreakCheck) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [IOSSecuritySuite.JailbreakCheck]
  public static var allCases: [IOSSecuritySuite.JailbreakCheck] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension IOSSecuritySuite.JailbreakCheck : Swift.Equatable {}
extension IOSSecuritySuite.JailbreakCheck : Swift.Hashable {}
